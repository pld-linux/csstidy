--- csstidy-1.4/SConstruct~	2009-12-10 16:46:51.000000000 +0200
+++ csstidy-1.4/SConstruct	2009-12-10 16:46:55.184590309 +0200
@@ -12,13 +12,24 @@
 #tell the user what we're doing
 print '**** Compiling in ' + mymode + ' mode...'
 
-debugcflags = ['-Wall', '-g', '-pedantic']   #extra compile flags for debug
-releasecflags = ['-O2']         #extra compile flags for release
+CXX = ARGUMENTS.get('CXX')
+CXXFLAGS = ARGUMENTS.get('CXXFLAGS')
+
+if CXXFLAGS:
+	debugcxxflags = releasecxxflags = CXXFLAGS.split(' ');
+else:
+	debugcxxflags = ['-Wall', '-g', '-pedantic']   #extra compile flags for debug
+	releasecxxflags = ['-O2']         #extra compile flags for release
+
+if CXX:
+	debugcxx = releasecxx = CXX
+else:
+	debugcxx = releasecxx = 'g++'
 
 env = Environment()
 
 #make sure the sconscripts can get to the variables
-Export('env', 'mymode', 'debugcflags', 'releasecflags')
+Export('env', 'mymode', 'debugcxx', 'debugcxxflags', 'releasecxx', 'releasecxxflags')
 
 #put all .sconsign files in one place
 env.SConsignFile()
--- csstidy-1.4/csstidy/SConscript~	2009-12-10 16:46:42.000000000 +0200
+++ csstidy-1.4/csstidy/SConscript	2009-12-10 16:46:46.397716113 +0200
@@ -3,8 +3,8 @@
 import glob
 
 #get all the build variables we need
-Import('env', 'project', 'mymode', 'debugcflags', 'releasecflags')
-localenv = env.Copy()
+Import('env', 'project', 'mymode', 'debugcxx', 'debugcxxflags', 'releasecxx', 'releasecxxflags')
+localenv = env.Clone()
 
 buildroot = '../' + mymode  #holds the root of the build directory tree
 builddir = buildroot + '/' + project   #holds the build directory for this project
@@ -13,9 +13,11 @@
 #append the user's additional compile flags
 #assume debugcflags and releasecflags are defined
 if mymode == 'debug':
-    localenv.Append(CCFLAGS=debugcflags)
+    localenv['CXX']=debugcxx
+    localenv.Append(CXXFLAGS=debugcxxflags)
 else:
-    localenv.Append(CCFLAGS=releasecflags)
+    localenv['CXX']=releasecxx
+    localenv.Append(CXXFLAGS=releasecxxflags)
 
 #specify the build directory
 localenv.BuildDir(builddir, ".", duplicate=0)
